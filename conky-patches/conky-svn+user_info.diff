--- doc/variables.xml	2007-10-03 16:53:03.000000000 +0100
+++ doc/variables.xml	2007-10-03 16:56:33.000000000 +0100
@@ -1698,6 +1698,42 @@
 </varlistentry>
 
 <varlistentry>
+        <term>
+                <command><option>user_number</option></command>
+        </term>
+        <listitem>
+                Number of users logged in
+        <para></para></listitem>
+</varlistentry>
+
+<varlistentry>
+        <term>
+                <command><option>user_names</option></command>
+        </term>
+        <listitem>
+                Lists the names of the users logged in
+        <para></para></listitem>
+</varlistentry>
+
+<varlistentry>
+        <term>
+                <command><option>user_terms</option></command>
+        </term>
+        <listitem>
+                Lists the consoles in use
+        <para></para></listitem>
+</varlistentry>
+
+<varlistentry>
+        <term>
+                <command><option>user_times</option></command>
+        </term>
+        <listitem>
+                Lists how long users have been logged in for
+        <para></para></listitem>
+</varlistentry>
+
+<varlistentry>
 	<term>
 		<command><option>voffset</option></command>
 		<option>(pixels)</option>
--- src/common.c	2007-10-03 16:53:00.000000000 +0100
+++ src/common.c	2007-10-03 16:51:33.000000000 +0100
@@ -285,6 +285,9 @@
 #endif
 	if (NEED(INFO_ENTROPY))
 		update_entropy();
+
+	if (NEED(INFO_USERS))
+		update_users();
 }
 
 int round_to_int(float f)
--- src/conky.c	2007-10-03 16:53:00.000000000 +0100
+++ src/conky.c	2007-10-03 16:51:33.000000000 +0100
@@ -1081,6 +1081,10 @@
 	OBJ_upspeedf,
 	OBJ_upspeedgraph,
 	OBJ_uptime,
+	OBJ_user_names,
+	OBJ_user_terms,
+	OBJ_user_times,
+	OBJ_user_number,
 	OBJ_uptime_short,
 	OBJ_imap,
 	OBJ_imap_messages,
@@ -2040,6 +2044,25 @@
 			case OBJ_entropy_poolsize:
 			case OBJ_entropy_bar:
 				break;
+                        case OBJ_user_names:
+                                if (info.users.names) {
+                                        free(info.users.names);
+                                        info.users.names = 0;
+                                }
+                                break;
+                        case OBJ_user_terms:
+                                if (info.users.terms) {
+                                        free(info.users.terms);
+                                        info.users.terms = 0;
+                                }
+                                break;
+                        case OBJ_user_times:
+                                if (info.users.times) {
+                                        free(info.users.times);
+                                        info.users.times = 0;
+                                }
+                                break;
+
 		}
 	}
 	free(objs);
@@ -3148,6 +3171,10 @@
 			obj->b = 25;
 		}
 	}
+        END OBJ(user_names, INFO_USERS)
+        END OBJ(user_times, INFO_USERS)
+        END OBJ(user_terms, INFO_USERS)
+        END OBJ(user_number, INFO_USERS)
 	END OBJ(uptime_short, INFO_UPTIME) END OBJ(uptime, INFO_UPTIME) END
 #ifndef __OpenBSD__
 		OBJ(adt746xcpu, 0) END OBJ(adt746xfan, 0) END
@@ -4993,6 +5020,19 @@
 			OBJ(uptime) {
 				format_seconds(p, p_max_size, (int) cur->uptime);
 			}
+			OBJ(user_names) {
+                                snprintf(p, p_max_size, "%s", cur->users.names);
+                        }
+                        OBJ(user_terms) {
+                                snprintf(p, p_max_size, "%s", cur->users.terms);
+                        }
+                        OBJ(user_times) {
+                                snprintf(p, p_max_size, "%s", cur->users.times);
+                        }
+                        OBJ(user_number) {
+                                snprintf(p, p_max_size, "%d", cur->users.number);
+                        }
+
 
 #if (defined(__FreeBSD__) || defined(__OpenBSD__)) && (defined(i386) || defined(__i386__))
 			OBJ(apm_adapter) {
@@ -7046,6 +7086,11 @@
 	update_interval = 10.0;
 	stuff_in_upper_case = 0;
 
+        info.users.names = NULL;
+        info.users.terms = NULL;
+        info.users.times = NULL;
+        info.users.number = 1;
+
 #ifdef TCP_PORT_MONITOR
 	tcp_port_monitor_args.max_port_monitor_connections = MAX_PORT_MONITOR_CONNECTIONS_DEFAULT;
 #endif
--- src/conky.h	2007-10-03 16:53:00.000000000 +0100
+++ src/conky.h	2007-10-03 16:51:33.000000000 +0100
@@ -235,6 +235,13 @@
 	unsigned int poolsize;
 };
 
+struct usr_info {
+	char *names;
+	char *times;
+	char *terms;
+	int number;
+};
+
 #ifdef TCP_PORT_MONITOR
 #include "libtcp-portmon.h"
 #define MAX_PORT_MONITOR_CONNECTIONS_DEFAULT 256
@@ -278,6 +285,7 @@
 #ifdef RSS
 	INFO_RSS = 24,
 #endif
+	INFO_USERS = 25,
 };
 
 
@@ -340,6 +348,7 @@
 #ifdef BMPX
 	struct bmpx_s bmpx;
 #endif
+	struct usr_info users;
 	struct process *cpu[10];
 	struct process *memu[10];
 	struct process *first_process;
@@ -476,6 +485,7 @@
 void format_seconds_short(char *buf, unsigned int n, long t);
 struct net_stat *get_net_stat(const char *dev);
 void clear_net_stats(void);
+void update_users();
 
 void update_stuff();

--- src/Makefile.am	2007-10-03 16:53:00.000000000 +0100
+++ src/Makefile.am	2007-10-03 16:51:33.000000000 +0100
@@ -78,7 +78,8 @@
 	mboxscan.c		\
 	mboxscan.h		\
 	$(x11)                  \
-	$(xmms2) 
+	$(xmms2) 		\
+	users.c
 
 AM_LDFLAGS = $(PTHREAD_LIBS) -lm
--- src/users.c	1970-01-01 01:00:00.000000000 +0100
+++ src/users.c	2007-10-03 16:51:33.000000000 +0100
@@ -0,0 +1,143 @@
+#include "conky.h"
+#include <utmp.h>
+#include <stdio.h>
+#include <string.h>
+#include <stdlib.h>
+#include <time.h>
+
+static void user_name(char **ptr) {
+	const struct utmp *usr;
+	char buf[512];
+
+	setutent();
+	while((usr=getutent())!=NULL) {
+		if (usr->ut_type==USER_PROCESS) {
+			strncat(buf, usr->ut_name, 9); strcat(buf, "\n");
+		}
+	}
+	*ptr = buf;
+}
+static void user_num(int *ptr) {
+        const struct utmp *usr;
+        int users_num = 0;
+
+        setutent();
+        while ((usr=getutent())!=NULL) {
+                if (usr->ut_type==USER_PROCESS) {
+                        ++users_num;
+                }
+        }
+        *ptr = users_num;
+}
+static void user_term(char **ptr) {
+        const struct utmp *usr;
+	char buf[512];
+
+        setutent();
+        while((usr=getutent())!=NULL) {
+                if (usr->ut_type==USER_PROCESS) {
+			strncat(buf, usr->ut_line, 13); strncat(buf, "\n", 3);
+                }
+        }
+	*ptr = buf;
+}
+static void user_time(char **ptr) {
+        const struct utmp *usr;
+        time_t login, real, diff;
+        struct tm *dtime;
+        char buf[512] = "";
+        char output[512] = "";
+
+        setutent();
+        while ((usr=getutent())!=NULL) {
+			if (usr->ut_type==USER_PROCESS) {
+				login=usr->ut_time;
+				time(&real);
+				diff = difftime(real, login);
+				dtime = localtime(&diff);
+				dtime->tm_year = dtime->tm_year-70;
+				dtime->tm_mon = dtime->tm_mon-1;
+				dtime->tm_mday = dtime->tm_mday-1;
+				if(dtime->tm_year>0){strftime(buf,512,"%yy %mm %dd %Hh %Mm\n", dtime); goto end;}
+				else if(dtime->tm_mon>0){strftime(buf,512,"%mm %dd %Hh %Mm\n", dtime); goto end;}
+				else if(dtime->tm_mday>0){strftime(buf,512,"%dd %Hh %Mm\n", dtime); goto end;}
+				else if(dtime->tm_hour>0){strftime(buf,512,"%Hh %Mm\n", dtime); goto end;}
+				else if(dtime->tm_min>0){strftime(buf,512,"%Mm\n", dtime); goto end;}
+				end:
+				strncat(output, buf, 512);
+			}
+        }
+		*ptr = output;
+}
+
+static void users_alloc(struct information *ptr) {
+	if (ptr->users.names == NULL) {
+		ptr->users.names = malloc(TEXT_BUFFER_SIZE);
+
+	}
+	if (ptr->users.terms == NULL) {
+		ptr->users.terms = malloc(TEXT_BUFFER_SIZE);
+	}
+	if (ptr->users.times == NULL) {
+		ptr->users.times = malloc(TEXT_BUFFER_SIZE);
+	}
+}
+
+void update_users() {
+	struct information * current_info = &info;	
+	char *temp;
+	int t;
+	users_alloc(current_info);
+	user_name(&temp);
+	if (temp!=NULL) {
+		if (current_info->users.names) {
+			free(current_info->users.names); current_info->users.names = 0;
+		}
+		current_info->users.names = malloc(TEXT_BUFFER_SIZE);
+		strncpy(current_info->users.names, temp, TEXT_BUFFER_SIZE);
+	} else {
+                if (current_info->users.names) {
+                        free(current_info->users.names); current_info->users.names = 0;
+                }
+		current_info->users.names = malloc(TEXT_BUFFER_SIZE);
+		strncpy(current_info->users.names, "broken", TEXT_BUFFER_SIZE);
+	}
+	user_num(&t);
+	if (t!=0) {
+		if (current_info->users.number) {
+			current_info->users.number = 0;
+		}
+		current_info->users.number = t;
+	} else {
+		current_info->users.number = 0;
+	}
+	temp = "\0";
+	user_term(&temp);
+	if (temp!=NULL) {
+                if (current_info->users.terms) {
+                        free(current_info->users.terms); current_info->users.terms = 0;
+                }
+		current_info->users.terms = malloc(TEXT_BUFFER_SIZE);
+		strncpy(current_info->users.terms, temp, TEXT_BUFFER_SIZE);
+	} else {
+                if (current_info->users.terms) {
+                        free(current_info->users.terms); current_info->users.terms = 0;
+                }
+		current_info->users.terms = malloc(TEXT_BUFFER_SIZE);
+		strncpy(current_info->users.terms, "broken", TEXT_BUFFER_SIZE);
+	}
+	user_time(&temp);
+	if (temp!=NULL) {
+                if (current_info->users.times) {
+                        free(current_info->users.times); current_info->users.times = 0;
+                }
+		current_info->users.times = malloc(TEXT_BUFFER_SIZE);
+		strncpy(current_info->users.times, temp, TEXT_BUFFER_SIZE);
+	} else {
+                if (current_info->users.times) {
+                        free(current_info->users.times); current_info->users.times = 0;
+                }
+		current_info->users.times = malloc(TEXT_BUFFER_SIZE);
+		strncpy(current_info->users.times, "broken", TEXT_BUFFER_SIZE);
+	}
+}
